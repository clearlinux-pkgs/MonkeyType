#
# This file is auto-generated. DO NOT EDIT
# Generated by: autospec.py
#
# Source0 file verified with key 0x2D1FB7916A52E121 (carl@carljm.me)
#
Name     : MonkeyType
Version  : 19.11.2
Release  : 31
URL      : https://files.pythonhosted.org/packages/05/a6/2feaeb16046b47ed64cef830efceaeeb2a9d67c8229c996b2730801700ac/MonkeyType-19.11.2.tar.gz
Source0  : https://files.pythonhosted.org/packages/05/a6/2feaeb16046b47ed64cef830efceaeeb2a9d67c8229c996b2730801700ac/MonkeyType-19.11.2.tar.gz
Source1  : https://files.pythonhosted.org/packages/05/a6/2feaeb16046b47ed64cef830efceaeeb2a9d67c8229c996b2730801700ac/MonkeyType-19.11.2.tar.gz.asc
Summary  : Generating type annotations from sampled production types
Group    : Development/Tools
License  : BSD-3-Clause
Requires: MonkeyType-bin = %{version}-%{release}
Requires: MonkeyType-python = %{version}-%{release}
Requires: MonkeyType-python3 = %{version}-%{release}
Requires: mypy_extensions
Requires: retype
Requires: stringcase
Requires: typed_ast
BuildRequires : buildreq-distutils3
BuildRequires : mypy_extensions
BuildRequires : retype
BuildRequires : stringcase
BuildRequires : typed_ast

%description
MonkeyType
==========

MonkeyType collects runtime types of function arguments and return values, and
can automatically generate stub files or even add draft type annotations
directly to your Python code based on the types collected at runtime.

Example
-------

Say ``some/module.py`` originally contains::

  def add(a, b):
      return a + b

And ``myscript.py`` contains::

  from some.module import add

  add(1, 2)

Now we want to infer the type annotation of ``add`` in ``some/module.py`` by
running ``myscript.py`` with ``MonkeyType``. One way is to run::

  $ monkeytype run myscript.py

By default, this will dump call traces into a SQLite database in the file
``monkeytype.sqlite3`` in the current working directory. You can then use the
``monkeytype`` command to generate a stub file for a module, or apply the type
annotations directly to your code.

Running ``monkeytype stub some.module`` will output a stub::

  def add(a: int, b: int) -> int: ...

Running  ``monkeytype apply some.module`` will modify ``some/module.py`` to::

  def add(a: int, b: int) -> int:
      return a + b

This example demonstrates both the value and the limitations of
MonkeyType. With MonkeyType, it's very easy to add annotations that
reflect the concrete types you use at runtime, but those annotations may not
always match the full intended capability of the functions. For instance, ``add``
is capable of handling many more types than just integers. Similarly, MonkeyType
may generate a concrete ``List`` annotation where an abstract ``Sequence`` or
``Iterable`` would be more appropriate. MonkeyType's annotations are an
informative first draft, to be checked and corrected by a developer.

Motivation
----------

Readability and static analysis are the primary motivations for adding type
annotations to code. It's already common in many Python style guides to
document the argument and return types for a function in its docstring;
annotations are a standardized way to provide this documentation, which also
permits static analysis by a typechecker such as `mypy`_.

For more on the motivation and design of Python type annotations, see
:pep:`483` and :pep:`484`.

.. _mypy: http://mypy.readthedocs.io/en/latest/

Requirements
------------

MonkeyType requires Python 3.6+ and the `retype`_ library (for applying type
stubs to code files). It generates only Python 3 type annotations (no type
comments).

Installing
----------

Install MonkeyType with `pip`_::

  pip install MonkeyType

How MonkeyType works
--------------------

MonkeyType uses the `sys.setprofile`_ hook provided by Python to interpose on
function calls, function returns, and generator yields, and record the types of
arguments / return values / yield values.

It generates `stub files`_ based on that data, and can use `retype`_ to apply those
stub files directly to your code.

.. _pip: https://pip.pypa.io/en/stable/
.. _retype: https://pypi.python.org/pypi/retype
.. _sys.setprofile: https://docs.python.org/3/library/sys.html#sys.setprofile
.. _stub files: http://mypy.readthedocs.io/en/latest/basics.html#library-stubs-and-the-typeshed-repo

.. end-here

See `the full documentation`_ for details.

.. _the full documentation: http://monkeytype.readthedocs.io/en/latest/

Troubleshooting
---------------

Check if your issue is mentioned in `the frequently asked questions`_ list.

.. _the frequently asked questions: http://monkeytype.readthedocs.io/en/stable/faq.html

Development
-----------

See CONTRIBUTING.rst for information on developing and contributing to MonkeyType.

LICENSE
-------

MonkeyType is BSD licensed.


Changelog
=========

19.11.2
-------

* Disable TypedDict generation by default for now, since it breaks `--apply`.


19.11.1
-------

* Add setup.py dependences for mypy-extensions and stringcase. Thanks Nicholas
  Bollweg for the report.


19.11.0
-------

* Trace per-key value types for dictionaries (up to a configured max size) and
  if the traced types are consistent, output a TypedDict in the stub instead of
  a homogenous dict. Thanks Pradeep Kumar Srinivasan. Merge of #143, fixes
  #105.

* Fix crash with empty tuples. Thanks akayunov for the report, Christophe
  Simonis for the simplest-case repro. Fixes #136.

* Don't add stringified annotations to type stubs. Thanks Łukasz Langa. Merge
  of #148.

* Don't crash in type rewriter on user-defined types that name-collide with
  container types from the `typing` module. Thanks Łukasz Langa. Merge of #146.

* Load config after argument parsing instead of during it, to avoid argparse
  catching TypeError/ValueError at import time of a custom config and replacing
  with a generic "invalid value" message. See
  https://bugs.python.org/issue30220. Thanks Daniel G Holmes for the report.
  Merge of #142, fixes #141.

* Typing support for collections.defaultdict. Thanks Dinesh Kesavan. Merge of #152.


19.5.0
------

* Mark ``monkeytype`` package as typed per PEP 561. Thanks Vasily Zakharov for 
  the report.
* Add ``-v`` option; don't display individual traces that fail to decode unless
  it is given.


19.1.1
------

* Pass ``--incremental`` to retype when applying stubs, so it doesn't choke on
  partial stubs (which can result from e.g. failures to decode some traces).


19.1.0
------

* Add ``--omit-existing-annotations`` option, implied by ``apply``. Merge of
  #129. Fixes #11 and #81.

* Render ``...`` for all parameter defaults in stubs. Remove the
  ``--include-unparsable-defaults`` and ``--exclude-unparsable-defaults`` CLI
  options, as well as the ``include_unparsable_defaults()`` config method.
  Merge of #128, fixes #123.

* Render forward references (from existing annotations) correctly. Merge of #127.

* Rewrite `Generator[..., None, None]` to `Iterator[None]` by default. Merge of
  #110, fixes #4. Thanks iyanuashiri.


18.8.0
------

* Support Python 3.7. Merge of #107, fixes #78.

* Print useful error message when filename is passed to stub/apply. Merge of
  #88, fixes #65. Thanks rajathagasthya.

* Fix crash in ``list_modules`` when there are no traces. Merge of #106, fixes
  #90.  Thanks tyrinwu.

* Enable ``python -m monkeytype {run,stub,apply} ...``. Merge of #100, fixes
  #99. Thanks retornam.


18.5.1
------

* Add ``MONKEYTYPE_TRACE_MODULES`` env var for easier tracing of code in
  site-packages. Merge of #83, fixes #82. Thanks Bo Peng.

* Fix passing additional arguments to scripts run via ``monkeytype run``. Merge
  of #85. Thanks Danny Qiu.

* Fix handling of spaces in filenames passed to retype. Merge of #79, fixes
  #77.

* Never render NoneType in stubs, substitute None.  Merge of #75, fixes #5.
  Thanks John Arnold.


18.2.0
------

* Move filtering of `__main__` module into CallTraceStoreLogger instead of core
  tracing code, so it can be overridden by special use cases like IPython
  tracing. Merge of #72, fixes #68. Thanks Tony Fast.

* Generate stubs for modules where the module file is like module/__init__.py.
  Print retype stdout/stderr. Merge of #69, Fixes #66.
  Thanks John Arnold.


18.1.13
-------

* Improve error messages in case of "no traces found" and/or file path given
  instead of module name. Merge of #37, partial fix for #65. Thanks Aarni
  Koskela.

* Add ``monkeytype list_modules`` sub-command to list all modules present in
  trace db. Merge of #61, fixes #60. Thanks Alex Miasoiedov.

* Add ``--diff`` option to ``monkeytype stub``. Merge of #59, fixes #58.
  Thanks Tai-Lin!

* Add ``--ignore-existing-annotations`` option to ``monkeytype stub``. Merge of
  #55, fixes #15. Thanks Tai-Lin!


18.1.11
-------

* Fix crash in RewriteEmptyContainers rewriter if a parameter has only empty
  container types in traces (and more than one). Fixes #53.


18.1.10
-------

* Display retype errors when stub application fails. Merge of #52, fixes #49.

* Add ``--sample-count`` option to show the number of traces a given stub is
  based on. Merge of #50, fixes #7. Thanks Tai-Lin.

* Add ``monkeytype run -m`` for running a module as a script. Merge of
  #41. Thanks Simon Gomizelj.

* Add support for Django's ``cached_property`` decorator. Merge of #46, fixes
  #9. Thanks Christopher J Wang.

* Catch and log serialization exceptions instead of crashing. Fixes #38, merge
  of #39.

* Fix bug in default code filter when Python lib paths are symlinked. Merge of
  #40. Thanks Simon Gomizelj.

17.12.3
-------

* Rewrite imports from _io module to io. (#1, merge of #32). Thanks Radhans
  Jadhao.

* Add Config.cli_context() as a hook for custom CLI initialization and cleanup
  logic (#28; merge of #29). Thanks Rodney Folz.

17.12.2
-------

* Exclude "frozen importlib" functions in default code filter.

* Fix passing args to script run with ``monkeytype run`` (#18; merge of
  #21). Thanks Rodney Folz.

* Fix generated annotations for NewType types (#22; merge of #23). Thanks
  Rodney Folz.

17.12.1
-------

* Fix using MonkeyType outside a virtualenv (#16). Thanks Guido van Rossum for
  the report.

17.12.0
-------

* Initial public version.

%package bin
Summary: bin components for the MonkeyType package.
Group: Binaries

%description bin
bin components for the MonkeyType package.


%package python
Summary: python components for the MonkeyType package.
Group: Default
Requires: MonkeyType-python3 = %{version}-%{release}
Provides: monkeytype-python

%description python
python components for the MonkeyType package.


%package python3
Summary: python3 components for the MonkeyType package.
Group: Default
Requires: python3-core
Provides: pypi(MonkeyType)

%description python3
python3 components for the MonkeyType package.


%prep
%setup -q -n MonkeyType-19.11.2
cd %{_builddir}/MonkeyType-19.11.2

%build
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
export LANG=C.UTF-8
export SOURCE_DATE_EPOCH=1583173976
# -Werror is for werrorists
export GCC_IGNORE_WERROR=1
export AR=gcc-ar
export RANLIB=gcc-ranlib
export NM=gcc-nm
export CFLAGS="$CFLAGS -O3 -ffat-lto-objects -flto=4 "
export FCFLAGS="$CFLAGS -O3 -ffat-lto-objects -flto=4 "
export FFLAGS="$CFLAGS -O3 -ffat-lto-objects -flto=4 "
export CXXFLAGS="$CXXFLAGS -O3 -ffat-lto-objects -flto=4 "
export MAKEFLAGS=%{?_smp_mflags}
python3 setup.py build

%install
export MAKEFLAGS=%{?_smp_mflags}
rm -rf %{buildroot}
python3 -tt setup.py build  install --root=%{buildroot}
echo ----[ mark ]----
cat %{buildroot}/usr/lib/python3*/site-packages/*/requires.txt || :
echo ----[ mark ]----

%files
%defattr(-,root,root,-)

%files bin
%defattr(-,root,root,-)
/usr/bin/monkeytype

%files python
%defattr(-,root,root,-)

%files python3
%defattr(-,root,root,-)
/usr/lib/python3*/*
